// <auto-generated />
using System;
using EventManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventManager.Migrations
{
    [DbContext(typeof(EventManagerContext))]
    [Migration("20200511185552_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventManager.Models.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("EventSeriesId");

                    b.Property<int>("EventTypeId");

                    b.Property<string>("FundCenter");

                    b.Property<DateTime>("LastModified");

                    b.Property<long>("MaximumRegistrationsCount");

                    b.Property<long>("MaximumStandbyRegistrationsCount");

                    b.Property<long>("MinimumRegistrationsCount");

                    b.Property<int>("OwnerId");

                    b.Property<DateTime>("RegistrationClosedDate");

                    b.Property<DateTime>("RegistrationOpenDate");

                    b.Property<bool>("StandbyRegistrationsAllowed");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventSeriesId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManager.Models.Domain.EventSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("EventSerieses");
                });

            modelBuilder.Entity("EventManager.Models.Domain.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventTypeName");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("EventManager.Models.Domain.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Full");

                    b.Property<string>("Short");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("EventManager.Models.Domain.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("EventManager.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BlueDeckId");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<string>("IdNumber");

                    b.Property<string>("LDAPName");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("RankId");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventManager.Models.Domain.Event", b =>
                {
                    b.HasOne("EventManager.Models.Domain.EventSeries", "EventSeries")
                        .WithMany("Events")
                        .HasForeignKey("EventSeriesId");

                    b.HasOne("EventManager.Models.Domain.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventManager.Models.Domain.User", "Owner")
                        .WithMany("_ownedEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventManager.Models.Domain.User")
                        .WithMany("OwnedEvents")
                        .HasForeignKey("UserId");

                    b.OwnsOne("EventManager.sharedkernel.Address", "AddressFactory", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("AddressLine1");

                            b1.Property<string>("AddressLine2");

                            b1.Property<string>("City");

                            b1.Property<string>("State");

                            b1.Property<string>("Zip");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.HasOne("EventManager.Models.Domain.Event")
                                .WithOne("AddressFactory")
                                .HasForeignKey("EventManager.sharedkernel.Address", "EventId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("EventManager.Models.Domain.Registration", b =>
                {
                    b.HasOne("EventManager.Models.Domain.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventManager.Models.Domain.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EventManager.Models.Domain.User", b =>
                {
                    b.HasOne("EventManager.Models.Domain.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId");

                    b.OwnsOne("EventManager.sharedkernel.PersonFullName", "NameFactory", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("First");

                            b1.Property<string>("Last");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.HasOne("EventManager.Models.Domain.User")
                                .WithOne("NameFactory")
                                .HasForeignKey("EventManager.sharedkernel.PersonFullName", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
